#!/usr/bin/perl
#
#  When to reboot node with bmc?
#

use strict;
use warnings;
use DBI;
use Getopt::Long;

my $dbfile = 'cluster.db';

my $dir = '/newton/scripts';
my $pxedir = '/newton/files/pxelinux/pxelinux.cfg';

my ($role, $domain, $set, $add, $mac, $name, $nodeset, $ip, $norun) = qw(default local);
my $ROOTPW = 'root';
my $ok = GetOptions(
  'role|r=s' => \$role,
  'domain|d=s' => \$domain,
  'nodeset=s' => \$nodeset,
  'm|mac=s' => \$mac,
  'ip=s' => \$ip,
  'norun' => \$norun,
  'password=s' => \$ROOTPW,
  );
my $basename = shift @ARGV;
$norun = 1;

help() if(not $basename or not $ok);
checkrole();

my $db = DBI->connect("dbi:SQLite:dbname=$dir/cluster.db","","") || die $DBI::errstr;
$db->{AutoCommit} = 1; 
$db->{RaiseError} = 1;

checkdomain();

$nodeset = $basename unless defined $nodeset;
my (undef, $nextnode) = nextnode($basename);
print "Starting with $nextnode\n";

$SIG{INT} = "finish";

chdir $pxedir;
`ln -sf $role default`;

open(LOG, 'tail -n 100000 -f /var/log/messages | ') or die $!;
while(<LOG>){
  chomp;
  if(/DHCPACK on ([\d\.]+) to ([\w\:]+)/){
    my ($ip, $mac) = ($1, lc($2));
    next unless isnew($mac);
    warn "Found IP $ip $mac\n";
    next if fork;
    sleep 30;
    my $svctag = get_bmc_svctag($ip);
    exit unless defined $svctag;
    warn "Adding BMC $ip $mac $svctag\n";
    $db->do(
      'INSERT INTO tempnodes (ip,mac,svctag,type) VALUES (?,?,?,?)',
      undef, $ip, $mac, $svctag, 'bmc',
      );
    ipmi($ip, 'chassis power on');
    #check_match($svctag);
    exit;
    }
  elsif(/NodeAnnounce (\S+) (\S+) (\S+)/){
    my ($ip, $mac, $svctag) = ($1, lc($2), $3);
    next unless isnew($mac);
    warn "Found node $ip $mac\n";
    $db->do(
      'INSERT INTO tempnodes (ip,mac,svctag,type) VALUES (?,?,?,?)',
      undef, $ip, $mac, $svctag, 'system',
      );
    #check_match($svctag);
    }
  }
close LOG;

sub ipmi {
  my ($ip, $cmd) = @_;
  return `/usr/bin/ipmitool -I imb -H $ip -U root -P $ROOTPW $cmd`;
  }

sub get_bmc_svctag {
  my $ip = shift;
  return unless ping($ip);
  my $sysinfo = ipmi($ip, 'fru');
  my ($svctag) = $sysinfo =~ /Product Serial\s*:\s+(.+?)\n/s;
  return $svctag;
  }

sub ping {
  my $ip = shift;
  `ping -c1 -W2 $ip`;
  warn "No ping: $ip\n" if $?;
  return not $?;
  }

sub check_match {
  my $svctag = shift;
  my $info = $db->selectrow_arrayref(
    q/SELECT t1.ip,t1.mac,t2.ip,t2.mac FROM tempnodes t1,tempnodes t2 
      WHERE t1.svctag=? AND t1.svctag=t2.svctag AND t1.type=? and t2.type=?/,
    undef, $svctag, 'system', 'bmc',
    );
  return unless defined $info;
  my ($ip1,$mac1,$ip2,$mac2) = @$info;
  return unless defined $mac1 and defined $mac2 and defined $svctag;
  addnode($basename,$ip1,$mac1,$ip2,$mac2,$svctag);
  }

sub finish {
  print "Finishing...\n";
  close LOG;
  $db->disconnect();
  exit;
  }

sub isnew {
  my $mac = shift;
  my ($test) = $db->selectrow_array(
    'SELECT name FROM nodes WHERE mac=? or mac_bmc=?', 
    undef, $mac, $mac,
    );
  return 0 if defined $test;
  ($test) = $db->selectrow_array(
    'SELECT ip FROM tempnodes WHERE mac=?',
    undef, $mac,
    );
  return 0 if defined $test;
  return 1;
  }

sub nextnode {
  my ($id) = $db->selectrow_array(
    'SELECT max(id) FROM nodes WHERE base=? and domain=?', undef, $basename, $domain,
    );
  $id=-1 unless defined $id;
  $id++;
  my $base = $basename;
  return($id, "$base$id.$domain") unless $base =~ /(0{2,})/;
  my $len = length($1);
  $base =~ s/0{2,}/sprintf("\%0${len}i", $id)/e;
  return($id,"$base.$domain");
  }

sub addnode {
  my ($base, $ip, $mac, $ip_bmc, $mac_bmc, $svctag) = @_;
  return if taken('mac', $mac);
  my ($id, $name) = nextnode();
  return if taken('name', $name);
  $db->do(
    'DELETE FROM tempnodes WHERE svctag=?',
    undef, $svctag,
    );
  print "Creating $name, $id, $base, $domain, $ip, $mac, $ip_bmc, $mac_bmc, $role, $nodeset\n";
  $db->do(
    q/INSERT INTO nodes (name, id, base, domain, ip, mac, ip_bmc, mac_bmc, role, nodeset, svctag) VALUES (?,?,?,?,?,?,?,?,?,?,?)/,
    undef, $name, $id, $base, $domain, $ip, $mac, $ip_bmc, $mac_bmc, $role, $nodeset, $svctag,
    );
  run_scripts($name, $ip, $mac, $role) unless $norun;
  }

sub run_scripts {
  #warn "run_scripts() disabled\n";
  #return;
  my @info = @_;
  my $info = join(' ', @info);
  my @scripts = glob("$dir/node_install/*");
  for(sort @scripts){
    `$_ $info`;
    }
  }

sub taken {
  my ($key, $value) = @_;
  my ($taken) = $db->selectrow_array(
    "SELECT count(*) FROM nodes WHERE $key=?",
    undef, $value,
    );
  warn("Duplicate: $key=$value") if $taken;
  return $taken;
  }

sub checkdomain {
  my ($test) = $db->selectrow_array(
    'SELECT domain FROM domains WHERE domain=?',
    undef, $domain,
    );
  help("Domain $domain doesn't exist") 
    unless defined $test and $test eq $domain;
  }

sub checkrole {
  help("Role $role doesn't exist at $pxedir") unless -e "$pxedir/$role"; 
  }

sub checkip {
  my $ip = shift;
  
  }

sub help {
  my $msg = shift;
  warn "Error: $msg\n" if defined $msg;
  die  
q/Usage: detect_nodes [--role=<role>] [--domain=<domain>] [--nodeset=<setname>] <basename>
       detect_nodes --add --mac=<macaddress> [--ip=<ipaddress>] <nodename>
/;
  }

