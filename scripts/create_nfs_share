#!/usr/bin/perl

use strict;
use warnings;
use lib '/newton/scripts/';
use Newton;
use Getopt::Long;
use Data::Dumper;

unless($ENV{USER} eq 'root'){
  die "Error: Must run this as root.\n";
  }

my ($server, $name, $cap, $user) = @ARGV;
help("Invalid user name.\n") unless defined $user;
my ($UID, $GID) = ssh("id $user") =~ /uid=(\d+).+gid=(\d+)/;
help("User not found.\n") unless defined $GID;

die unless defined $UID and defined $GID;

my $format = 'ext4';
my $ok = GetOptions(
  format => \$format,
  );
help("Invalid option.\n") unless $ok;

my $cap_B = convert_capacity($cap);
my $vg = verify_capacity($server, $cap_B);

my $db = Newton::db();
my ($test) = $db->selectrow_array('SELECT name FROM storage WHERE name=?', undef, $name);
help("Error: NFS share name already exists.\n") if defined $test;

my ($uid, $gid) = ($UID, $GID);
if($user eq 'root'){
  $uid = $gid = 0;
  }
#else {
#  ($uid, $gid) = Newton::userinfo($user, 'uid', 'gid');
#  }
#help("No such user '$user'\n") unless defined $uid;

my $mntpnt = "/mnt/$name";
my $device = "/dev/$vg/$name";
print ssh("lvcreate -L ${cap_B}B -n $name $vg");
print ssh("mkfs -t $format $device");
print ssh("echo '$mntpnt 10.38.80.0/22(rw,sync) 160.36.136.0/27(rw,sync)' >> /etc/exports");
print ssh("echo '$device $mntpnt ext4 defaults 0 0' >> /etc/fstab");
print ssh("mkdir $mntpnt");
print ssh("mount $mntpnt && chown $uid:$gid $mntpnt");
print ssh("exportfs -r");

$server =~ s/\..+$//;
my $db_ok = $db->do(
  'INSERT INTO storage (name,server,mntOpt,mntPnt,capacity,uid,gid,created) VALUES (?,?,?,?,?,?,?,?)',
  undef, $name, $server, '', "/mnt/$name", $cap_B, $uid, $gid, time(),
  );
help("Error writing to the database.\n") unless $db_ok;

# rebuild auto.data
`/newton/scripts/rebuild_autofs`;

##################################################################################

sub help {
  my $msg = shift;
  warn $msg if defined $msg;
  die "Usage: $0 [--format=ext4] <server> <shareName> <capacity> <user>\n"
  }

sub ssh {
  return Newton::ssh(@_, $server, '-', 3600);
  }

sub verify_capacity {
  my ($server, $cap) = @_;
  my @data = ssh('vgdisplay -C --units B --noheadings --nosuffix');
  my ($vg) = map {$_->[1]}
    grep {defined $_->[7] and $_->[7] >= $cap} 
     map {chomp;[split /\s+/]} @data;
  help("Error: no volume has sufficient capacity.\n") unless defined $vg;
  return $vg;
  }

sub convert_capacity {
  my $cap = shift;
  my ($digits, $units) = $cap =~ /([\d\.]+)\s*([K|M|G|T])B*/i;
  my %conv = (K=>2**10, M=>2**20, G=>2**30, T=>2**40);
  help("Error: Invalid capacity format") unless defined $units and $conv{ uc $units };
  return int($conv{ uc $units }*$digits);
  }

__END__
Schema:
name text
server text
mntOpt text
mntPnt text
capacity integer
uid integer
gid integer
created integer
unique(name)
