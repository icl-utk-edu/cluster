#!/usr/bin/perl

use strict;
use warnings;
use lib "/newton/scripts";
use Newton;
use Getopt::Long;

my $dir = "/newton/scripts";
my $pxedir = '/newton/files/pxelinux/pxelinux.cfg';

my ($role, $domain, $set, $add, $mac, $name, $nodeset, $ip, $norun) = qw(default local);
my $ok = GetOptions(
  'role|r=s' => \$role,
  'domain|d=s' => \$domain,
  'nodeset=s' => \$nodeset,
  'a|add' => \$add,
  'm|mac=s' => \$mac,
  'ip=s' => \$ip,
  'norun' => \$norun,
  );
my $basename = shift @ARGV;
$norun ||= 0;

help() if(not $basename or not $ok or ($add and not defined $mac));

my $db = Newton::db();
$db->{AutoCommit} = 1; 
$db->{RaiseError} = 1;
# (name text, base text, id integer, ip text, mac text, role text, note text, nodeset text)
checkdomain();
checkrole();

if($add){
  my $newip = $ip || Newton::new_ip($domain);
  checkip($newip);
  ($set) = $basename =~ /^(.+?)\d*$/;
  $nodeset = $set unless defined $nodeset;
  my ($id) = $basename =~ /(\d+)$/;
  $id ||= 0;
  $id += 0;
  addnode("$basename.$domain", $nodeset, $id, $newip, $mac);
  exit;
  }

$nodeset = $basename unless defined $nodeset;
my ($tid,$nextnode) = nextnode($basename);
print "Starting with $nextnode\n";

$SIG{INT} = "finish";

chdir $pxedir;
`ln -sf $role default`;

my $total = 0;
open(LOG, 'tail -n 0 -f /var/log/messages | ') or die $!;
while(<LOG>){
  chomp;
  next unless /DHCPACK on ([\d\.]+) to ([\w\:]+)/;
  my ($ip, $mac) = ($1, $2);
  next unless isnew($ip,$mac); 
  my ($id,$name) = nextnode();
  addnode($name, $basename, $id, $ip, $mac);
  $total++;
  }
close LOG;

sub finish {
  print "Finishing...\n";
  unlink "$pxedir/default";
  close LOG;
  print "Total of $total new nodes detected.\n";
  #while($total){
  #  print "Total of $total new nodes detected.  Do you wish to add them? (y|n) ";
  #  my $ans = <>;
  #  chomp $ans;
  #  if(lc($ans) eq 'y'){
  #    print "Committing changes.\n";
  #    $db->commit();
  #    run_scripts();
  #    last;
  #    }
  #  elsif(lc($ans) eq 'n'){
  #    print "Rolling back changes.\n";
  #    $db->rollback();
  #    last;
  #    }
  #  print "error\n";
  #  }
  $db->disconnect();
  exit;
  }

sub isnew {
  my ($ip,$mac) = @_;
  my ($test) = $db->selectrow_array('SELECT name FROM nodes WHERE mac=? or mac_bmc=?', undef, $mac, $mac);
  return 0 if defined $test;
  my ($test2) = $db->selectrow_array('SELECT name FROM nodes WHERE ip=? or ip_bmc=?', undef, $ip, $ip);
  return 0 if defined $test2;
  return 1;
  }

sub nextnode {
  my ($id) = $db->selectrow_array(
    'SELECT max(id) FROM nodes WHERE base=? and domain=?', undef, $basename, $domain,
    );
  $id=-1 unless defined $id;
  $id++;
  my $base = $basename;
  return($id,"$base$id.$domain") unless $base =~ /(0{2,})/;
  my $len = length($1);
  $base =~ s/0{2,}/sprintf("\%0${len}i", $id)/e;
  return($id,"$base.$domain");
  }

sub addnode {
  my ($name, $base, $id, $ip, $mac) = @_;
  check('name', $name);
  check('mac', $mac);
  print "Creating $name, $base, $id, $domain, $ip, $mac, $role, $nodeset\n";
  $db->do('INSERT INTO nodes (name, base, id, domain, ip, mac, role, nodeset) VALUES (?,?,?,?,?,?,?,?)',
    undef, $name, $base, $id, $domain, $ip, $mac, $role, $nodeset,
    );
  run_scripts($name, $ip, $mac, $role) unless $norun;
  }

sub run_scripts {
  my @info = @_;
  my $info = join(' ', @info);
  my @scripts = glob("$dir/node_install/*");
  for(sort @scripts){
    print `$_ $info`;
    }
  }

sub check {
  my ($key, $value) = @_;
  my ($taken) = $db->selectrow_array(
    "SELECT count(*) FROM nodes WHERE $key=?",
    undef, $value,
    );
  help("Duplicate: $key=$value") if $taken;
  }

sub checkdomain {
  my ($test) = $db->selectrow_array(
    'SELECT domain FROM domains WHERE domain=?',
    undef, $domain,
    );
  help("Domain $domain doesn't exist") 
    unless defined $test and $test eq $domain;
  }

sub checkrole {
  help("Role $role doesn't exist at $pxedir") unless -e "$pxedir/$role"; 
  }

sub checkip {
  my $ip = shift;
  
  }

sub help {
  my $msg = shift;
  warn "Error: $msg\n" if defined $msg;
  die  
q/Usage: detect_nodes [--role=<role>] [--domain=<domain>] [--nodeset=<setname>] <basename>
       detect_nodes --add --mac=<macaddress> [--ip=<ipaddress>] <nodename>
/;
  }

