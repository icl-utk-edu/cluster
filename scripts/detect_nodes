#!/usr/bin/perl

use strict;
use warnings;
use Newton;
use Options;
use Data::Dumper;

my $basedir = Newton::basedir();

my $domain = 'cluster';

my %opt = Options(help());
my $basename = shift @ARGV;
unless($opt{role} and defined $basename){
  die help();
}

my $db = Newton::db();
checkrole($opt{role});

my $nextnode = nextnode();
print "Starting with $nextnode\n";

$SIG{INT} = "finish";

my %checked;

my $total = 0;
open(LOG, 'journalctl -f -u dnsmasq --since today | ') or die $!;
while(<LOG>){
  chomp;
  next unless /DHCPACK.+\s+([\d\.]+)\s+([[:xdigit:]\:]+)/;
  my ($ip, $mac) = ($1, $2);
  next if $checked{$ip}++;
  my ($ip_i, $mac_i) = map {Newton::addr2i($_)} ($ip, $mac);
  next if taken('ip', $ip_i) or taken('mac',$mac_i);
  if(Newton::ping($ip)){
    my $name = nextnode();
    $name = "$name.$domain";
    print "Adding node $name $ip $mac\n";
    next if $opt{dryrun};
    Newton::add_address($name, $ip, $mac, 'system', $name);
    $db->do('UPDATE addresses SET role=? WHERE name=?', undef, $opt{role}, $name);
    $total++;
  } else {
    print "Skipping $ip due to failed ping\n";
    }
  }
close LOG;

sub finish {
  print "Finishing...\n";
  close LOG;
  print "Total of $total new nodes detected.\n";
  Newton::node_install() unless $opt{dryrun};
  exit;
  }

sub nextnode {
  my $base = $basename;
  return $basename unless $base =~ s/\d+$/\%/;;
  my $systems = $db->selectcol_arrayref(
    'SELECT name FROM systems WHERE name LIKE ?', undef, $base,
    );
  my ($max) = sort {$b<=>$a} map {/(\d+)/;$1} @$systems;
  return $basename unless defined $max;
  $max++;
  my $len = length($max);
  (my $next = $basename) =~ s/\d{$len}$/$max/;
  return $next;
  }

sub taken {
  my ($key, $value) = @_;
  my ($taken) = $db->selectrow_array(
    "SELECT count(*) FROM addresses WHERE $key=?",
    undef, $value,
    );
  return $taken;
  }

sub checkrole {
  my $role = shift;
  help("Role $role doesn't exist") unless -d "$basedir/nodes/$role"; 
  }

sub help {
  my $msg = shift || '';
  return <<End
${msg}Find new nodes and put them into the node database.
Usage:  detect_nodes [options] <nodename>

Options include:
        -r, --role=s    - Node role
        -d, --dryrun    - Don't make any changes
        -h, --help      - Show this message
End
;
  }

