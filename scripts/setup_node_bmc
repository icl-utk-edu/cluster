#!/usr/bin/perl
#
# Create a USER-level user:
# user set name 3 monitor
# user set password 3 asldkfasldkf
# user enable 3
# chassis setaccess 1 3 link=on ipmi=on callin=on privilege=2
#
use strict;
use warnings;
use Newton;
use Data::Dumper;

Newton::sudo();

my $node = shift @ARGV;
my $db = Newton::db();
my $new_pw = Newton::bmc_passwd();
print "Setting BMC password to '$new_pw'\n";
my $old_pw  = $ENV{BMC_PASSWD} || Newton::get_passwd('Old BMC password');

$node ||= '';
my $systems = get_systems("$node\%");

print "Setting up BMC on the following systems: ";
print join(' ', map {$_->[0]} @$systems);
print ".  Press <ENTER> to continue.\n";
<>;

for(@$systems){
  my ($system, $ip) = @$_;
  my $bmc = Newton::ipaddr($ip);
  my @param = ($system, $bmc, $old_pw);
  my ($channel, $uid) = find_ipmi_user_info(@param);
  unless(defined $uid){
    cmd("user set name 5 $Newton::IPMIUSER", @param);
    cmd("user enable 5", @param);
    ($channel, $uid) = find_ipmi_user_info(@param);
    unless(defined $uid){
       warn "No user ID found for $Newton::IPMIUSER at $system";
       next;
    }
    cmd("user priv 5 0x4 $channel", @param);
  }
  cmd("channel setaccess $channel $uid link=off callin=on ipmi=on privilege=0x4", @param);
  cmd("lan set $channel access on", @param);
  print cmd("user set password $uid $new_pw 16", @param);

  my ($bmc_ip, $bmc_mac) = check_bmc_ip($channel, @param);
  if(not defined $bmc_ip){
    print cmd("lan set $channel ipsrc dhcp", @param);
    print cmd("mc reset warm", @param);
    sleep 60;
    ($bmc_ip, $bmc_mac) = check_bmc_ip($channel, @param);
    }
  next if defined $bmc; # already in the DB
  if(defined $bmc_ip){
    warn "Adding BMC IP $bmc_ip to $system\n";
    (my $name_bmc = $system) =~ s/(\.[^\.]+)$/-bmc$1/;
    Newton::add_address($name_bmc, $bmc_ip, $bmc_mac, 'bmc', $system);
  } else {
    warn "No BMC IP found for $system";
  }
}

sub check_bmc_ip {
  my ($channel, @param) = @_;
  my ($system, $bmc) = @param;
  my @info = cmd("lan print $channel", @param);
  my $bmc_mac = extract_ipmi("MAC Address", @info);
  return unless defined $bmc_mac;
  my $addr_src = extract_ipmi("IP Address Source", @info);
  return unless $addr_src =~ /DHCP/;
  my $bmc_ip = extract_ipmi("IP Address", @info);
  if(defined $bmc_ip and defined $bmc and $bmc_ip ne $bmc){
    warn "Warning: BMC IP doesn't match database value '$bmc' != '$bmc_ip'";
    return;
  }
  return unless defined $bmc_ip and Newton::ping($bmc_ip);
  return $bmc_ip, $bmc_mac;
}

sub extract_ipmi {
  my ($search, @data) = @_;
  for(@data){
    chomp;
    my ($field, $value) = /^(.+?)\s*:\s*(.+)$/;
    next unless defined $field;
    return $value if $field eq $search;
  }
}

sub find_ipmi_user_info {
  my ($system, $bmc, $old_pw) = @_;
  my ($channel, $uid);
  for(1..10){
    $channel = $_;
    my @info = cmd("user list $channel", $system, $bmc, $old_pw);
    ($uid) = map {$_->[0]}
                grep {$_->[1] eq $Newton::IPMIUSER}
		grep { defined $_->[5] }
                map {chomp; [split /\s+/]} @info;
    last if defined $uid;
  }
  return ($channel, $uid);
}

sub cmd {
  my ($cmd, $system, $bmc, $password) = @_;
  my @data;
  if(defined $bmc and defined $password and $password ne ''){
    print "$system (bmc): $cmd\n";
    @data = Newton::ipmi($cmd, $bmc, $password);
  } else {
    print "$system (host): $cmd\n";
    @data = Newton::ssh("ipmitool $cmd", $system);
  }
  return @data;
}

sub get_systems {
   my $query = shift;
   my $systems = $db->selectall_arrayref(
      'SELECT system,ip,type FROM addresses WHERE system like ?',
      undef, $query,
      );
   my %systems;
   for(@$systems){
      my ($name, $ip, $type) = @$_;
      $systems{$name}->{$type} = $ip;
      }
   @$systems = map {[$_, $systems{$_}->{bmc}]} sort {$a cmp $b} keys %systems;
   return $systems;
}
