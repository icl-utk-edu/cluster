#!/bin/bash -e

if [ $USER != "root" ]; then
   echo Running as root
   sudo -i $0 $@
   exit
fi

#set -x

NAME=$1
if [ -z "$NAME" ]; then
	# Build all node roles that are assigned to nodes
	IFS=$'\n'
	# "docker run" causes problems with "while read", this is tricky
	for image in `cluster_role --distinct`; do
		unset IFS # Need this!
		build_node_image $image
	done
	exit
fi
shift
VARIANTS=$( echo $@ | xargs -n1 echo | sort | xargs echo)
echo Building $NAME $VARIANTS
BASEDIR=$(cluster_basedir)
DOCKER=$BASEDIR/nodes/$NAME/docker
if [ -z "$VARIANTS" ]; then
	VARIANTS=default
else 
        ARGS="--build-arg ${VARIANTS// / --build-arg }"
fi
HASH=$(echo -n $NAME $VARIANTS | md5sum | awk '{print $1}')
DEST=$BASEDIR/nodes/$NAME/images/$HASH
DATE=`date '+%F-%T'`
ROOTFS=$DEST/rootfs-$DATE

if [[ -z "$NAME" || ! -d $DOCKER ]]; then
	echo "Please provide a valid node image name"
	exit 1
fi

IMAGE=node_image_$HASH

docker build --progress=plain -t $IMAGE \
	--ulimit nofile=1024000:1024000 \
	--build-context etc=/etc \
	--build-context ansible=$BASEDIR/ansible \
	--build-context common=$BASEDIR/nodes/common \
	--build-context ssh_root=/root/.ssh \
	--build-arg HASH=$HASH \
	$ARGS $DOCKER

docker remove temp || true
docker run -i --name temp $IMAGE sleep 0
mkdir -p $ROOTFS
cd $ROOTFS
docker export temp | tar -x

echo -e "search cluster\nnameserver $(host headnode | awk '{print $4}')" > etc/resolv.conf

cd ..
rm -f rootfs
ln -sf $ROOTFS rootfs
ln -sf rootfs/boot/vmlinuz-* kernel
ln -sf rootfs/boot/init*.img initrd
ln -sf rootfs/boot/config.ipxe config.ipxe
echo $NAME $VARIANTS $DATE > $ROOTFS/node_image.txt
echo Done building $NAME $VARIANTS - $IMAGE

