#!/usr/bin/perl
# Rebuild passwd, shadow, and group files containing cluster users

use strict;
use warnings;
use lib '/newton/scripts';
use Newton;
use Data::Dumper;

my $outdir = '/newton/files/nis';

my $users = Newton::WebDB('users');
my $membership = Newton::WebDB('membership');
my $projects = Newton::WebDB('projects');

die "Error: no enough users returned!" if scalar(@$users) < 2;

my %gid = map {$_->{project} => $_->{gid}} @$projects;
my %pri = map {$_->{project} => ($_->{priority}||0)} @$projects;

my %supgroups;
my @passwd = my @shadow = my @group = "# Automatically generated by /newton/scripts/rebuild_users\n";
for(@$users){
  my %in = %$_;
  my ($username, $uid, $shell, $home) = map {$in{$_}} qw/username uid shell home/;
  my @memberof = grep {$username eq $_->{username}} @$membership;
  # use the user's highest priority group as the default
  # or the group that they are leader of
  my ($project) = map {$_->{project}}
                  sort {($pri{$b->{project}} || 0) <=> ($pri{$a->{project}} || 0) } 
                  sort {($b->{leader}||0) <=> ($a->{leader}||0) } 
                  @memberof;
  Newton::setGridUserProject($username, $project);
  my $gid = $gid{$project};
  # add user to supplemental group list
  for(grep {$_->{project} ne $project} @memberof){
    my $project = $_->{project};
    push @{ $supgroups{$project} }, $username;
    }
  push @passwd, join(':', $username,'x',$uid,$gid,'',"$home/$username", $shell)."\n";
  push @shadow, "${username}:!!:::::::\n";
  }

for(@$projects){
  my ($project, $gid) = ($_->{project}, $_->{gid});
  my $members = $supgroups{$project} || [];
  push @group, group($project, $gid, @$members);
  }
my $c = 0;
while(@$users){
  my @sublist = map {$_->{username}} splice(@$users,0,20);
  push @group, group("newton$c", 900, @sublist);
  $c++;
  }
push @group, group("newton", 900, '');

output("$outdir/passwd", @passwd);
output("$outdir/shadow", @shadow);
output("$outdir/group", @group);

warn "SUDO to update NIS maps.\n" unless $ENV{USER} eq 'root';
print `cd /var/yp && sudo make`;

sub output {
  my ($file, @data) = @_;
  open(OUT, "+> $file") or die $!;
  flock(OUT,2) or die $!;
  print OUT @data;
  close OUT;
  }

sub group {
  my ($name, $gid, @members) = @_;
  return join(':', $name,'x',$gid, join(',', @members))."\n";
  }

