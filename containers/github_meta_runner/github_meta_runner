#!/usr/bin/perl

use strict;
use warnings;

my @supported_labels = qw/self-hosted cpu cpu_intel cpu_amd gpu_intel gpu_nvidia gpu_amd infiniband/;

my %org_tokens = map {/^GHPAT_(.+)$/ ? ($1=>$ENV{$_}) : ()} keys %ENV;

github_meta_runner->new(80)->run();


package github_meta_runner;

use strict;
use warnings;
use HTTP::Server::Simple::CGI;
use base qw(HTTP::Server::Simple::CGI);
use JSON 'decode_json';


sub handle_request {
   my $self = shift;
   my $cgi  = shift;
   my ($message, $code) = response($cgi);
   $code ||= 200;
   my $date = localtime();
   warn "[$date] $message\n";
   print "HTTP/1.0 $code\r\n";
   print $cgi->header();
   print $message;
}

sub response {
   my $job = decode_job(shift)
      || return('Payload error', 501);
   my $handler = {
	   queued    => \&do_queued,
           completed => \&do_completed,
           }->{ $job->{action} } || \&do_ignore;
   my ($result, $code) = &{$handler}($job);
   return "$job->{org} $job->{repo} $result", $code;
}

sub do_queued {
   my $job = shift;
   my $org = $job->{org};
   my $repo = $job->{repo};
   my $slurm_request = generate_slurm_request($job->{labels});
   return "Ignoring job" unless defined $slurm_request;
   my $label_list = join(',', @{ $job->{labels} });
   my $token = $org_tokens{$org};
   return("Ignoring unknown org") unless defined $token;
   my $ans = `sbatch $slurm_request -J CI_${org}_${repo} /opt/github_ephemeral.sbatch $org $label_list $token 2>&1`;
   chomp $ans;
   if($ans =~ /Submitted batch job \d+/){
      return "$ans ($slurm_request)";
   } else {
      return "Error submitting job for ($slurm_request) ($ans)", 501;
   }
}

sub do_completed {
   my $job = shift;
   return "Job $job->{name} = $job->{conclusion}";
}

sub do_ignore {
   my $job = shift;
   return "Ignoring action $job->{action}";
}

sub decode_job {
   my $cgi = shift;
   my $raw = $cgi->param('payload') || return;
   my $payload = decode_json($raw) || return;
   my $job = $payload->{workflow_job};
   return unless defined $job and ref($job);
   $job->{org} = $payload->{organization}->{login};
   $job->{repo} = $payload->{repository}->{name};
   $job->{action} = $payload->{action};
   return $job;
}

sub generate_slurm_request {
   my $labels = shift;
   my @gres = ('github');
   my @const = ('docker');
   for(@$labels){
      my $label = $_;
      next unless grep /^$label$/, @supported_labels;
      if(/gpu_(\w+)/){
	 push @gres, "gpu:$1";
      } else {
	 push @const, $_;
      }
   }
   return if @const == 1 and @gres == 1;
   @const = grep {$_ ne 'cpu' and $_ ne "self-hosted"} @const;
   my @out = ( '-C', join(',', @const) );
   push(@out, '--gres', join(',', @gres)) if @gres;
   return join(' ', @out);
}

1;
