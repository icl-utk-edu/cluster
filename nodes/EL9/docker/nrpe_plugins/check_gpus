#!/usr/bin/perl

# If the node has GPUs configured in Slurm, check that they look OK

use strict;
use warnings;
use lib '/usr/lib64/nagios/plugins';
use utils '%ERRORS';
use Data::Dumper;

my %funcs = (
	'nvidia' => \&gpu_nvidia,
	'amd' => \&gpu_amd,
	'intel' => \&gpu_intel,
	);

my $hostname = `hostname -s`;
my $config = `scontrol show node $hostname`;
$config =~ /Gres=(\S+)/s;
my @gres = split(',', $1);
for(@gres){
	my ($gputype, $count) = /gpu:(\w+):(\d+)/;
	next unless defined $gputype;
        my $func = $funcs{$gputype};
	my $msg = &$func($count);
	finish("CRITICAL", "$gputype $msg") if defined $msg;
}

finish('OK', "All GPUs verified");


sub gpu_nvidia {
	my $count = shift;
	my @gpus = `nvidia-smi -L`;
	my $found = scalar @gpus;
        return "Configured ($count) != Found ($found)" if $found != $count;
        return;
}

sub gpu_amd {
   my $nconfig = shift;
   my @gpus = map {(split /,/)[2]} grep {/^card\d+,/} `rocm-smi --showproductname --csv`;
   my $nfound = scalar @gpus;
   return "Configured ($nconfig) != Found ($nfound)" if $nconfig != $nfound;

   my $rocminfo = `rocminfo`;
   for(@gpus){
      my $id = $_;
      return "ID ($id) missing in rocminfo" unless $rocminfo =~ /\($id\)/;
   }
   return;
}

sub gpu_intel {
	my $count = shift;
	my @gpus = grep {/Device #\d+.*Intel/} `clinfo -l`;
	my $found = scalar @gpus;
	return "Configured ($count) != Found ($found)" if $found != $count;
	return;
}

sub finish {
  my ($code, $msg) = @_;
  print "GPUs $code: $msg\n";
  exit $ERRORS{$code};
  }
