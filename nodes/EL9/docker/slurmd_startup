#!/usr/bin/perl

# Creates gres.conf with correct GPU config:
# Name=gpu Type=nvidia File=/dev/nvidia0
# Name=gpu Type=amd File=/dev/dri/card0

use strict;
use warnings;
use Data::Dumper;

my @cmds = (
	['nvidia', ['v100', 'a100', 'h100'], '/dev/nvidia\d+', 'nvidia_gpu_env', 'nvidia-smi --format=csv,noheader --query-gpu=name'],
	['amd', ['radeon vii', 'mi210'], '/dev/dri/renderD\d+', 'amd_gpu_env', 'rocm-smi --showproductname --csv'],
	['intel', ['a770'], '/dev/dri/renderD\d+', 'intel_gpu_env', 'clinfo -l'],
);
my (%gres, %features, @devices);
for(@cmds){
	my ($vendor, $match, $regex, $flags, $cmd) = @$_;
	(my $glob = $regex) =~ s/\\d\+/*/;
        my @dev_files = grep /$regex/, glob($glob);
	for(`$cmd 2>/dev/null`){
		my $line = $_;
		for(@$match){
			my $key = $_;
			next unless $line =~ /$key/i;
			$gres{"gpu:$vendor"}++;
			my $dev = shift @dev_files;
			push @devices, "Name=gpu Type=$vendor File=$dev Flags=$flags\n";
			(my $feature = "gpu_$key") =~ s/\s+//;
			$features{$feature}++;
			$features{"gpu_$vendor"}++;
		}
	}
}

$gres{github} = 1;

open(OUT, '+>/etc/slurm/gres.conf') or die $!;
flock(OUT, 2) or die $!;
print OUT "Name=github Count=1\n";
print OUT @devices;
close OUT;


my $config = `slurmd -C | grep NodeName`;
chomp $config;
$config =~ s/NodeName=(\S+)//;
my $nodename = $1;

#if($config =~ s/ThreadsPerCore=2/ThreadsPerCore=1/){
#	$config =~ /CPUs=(\d+)/;
#	my $cpus = $1 / 2;
#	$config =~ s/CPUs=\d+/CPUs=$cpus/;
#}

# Set "docker" feature if docker is running
unless(system('docker ps')){
   $features{docker} = 1;
}


# Set CPU type feature
open(IN, '/proc/cpuinfo');
my @cpuinfo = <IN>;
close IN;

for(qw/AMD Intel POWER9 ARM/){
	my $arch = $_;
	my $label = lc("cpu_$arch");
	$features{$label} = 1 if grep(/$arch/, @cpuinfo);
}

my ($nodeset) = $nodename =~ /^([a-z]+)/;
$features{$nodeset} = 1;

$features{infiniband} = 1 if has_infiniband();

if(keys %gres){
	$config .= ' Gres=' . join(',', map {"$_:$gres{$_}"} keys %gres);
}
if(keys %features){
	$config .= ' Feature=' . join(',', keys %features);
}

# Force pam_slurm_adopt to use the correct hostname
my $host = `hostname -s`;
chomp $host;
open(OUT, "+> /etc/pam.d/slurm") or die $!;
flock(OUT, 2) or die $!;
print OUT "account required pam_slurm_adopt.so nodename=$host\n";
close OUT;

`scontrol delete node $nodename`;

print "Config: $config\n";
exec('/usr/sbin/slurmd', '-D', '-s', '-Z', '--conf', $config);


sub has_infiniband {
	# Return true if Infiniband port is active
	return `ibstatus` =~ /ACTIVE/s;
}
